{"version":3,"sources":["config.js","assets/logo.svg","assets/poop_happy.svg","assets/poop_sad.svg","assets/poop_toxicity.svg","helpers/xhrequests.js","components/shared/Header/Header.jsx","components/shared/Indicator/Indicator.jsx","components/shared/Table/Table.jsx","components/shared/SmellIndicator/SmellIndicator.jsx","components/shared/Form/Form.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","dns","port","__webpack_require__","p","get","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","url","options","data","json","wrap","_context","prev","next","method","headers","Content-Type","mode","cache","fetch","sent","abrupt","t0","stop","_x","apply","this","arguments","put","_ref3","_callee3","body","_context3","JSON","stringify","_x4","_x5","Header","props","react_default","createElement","className","src","logo","alt","Indicator","status","poopSad","poopHappy","defaultProps","Table","top","cb","es","columns","accessor","style","textAlign","fontSize","pageSize","showPagination","defaultSortMethod","b","desc","getTdProps","state","rowInfo","column","instance","onClick","e","handleOriginal","original","SmellIndicator","smellValue","valueClass","poop","Form","id","type","input","document","getElementById","name","value","App","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","loadInfo","_this$state","toxicity","concat","config","then","setState","catch","console","log","parsedInt","parseInt","_this2","getTop","setInterval","topWrapper","_this3","_this$state2","change","shared_Form_Form","info","shared_Table_Table","item","lock","shared_Header_Header","shared_SmellIndicator_SmellIndicator","shared_Indicator_Indicator","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5d50a694.chunk.js","sourcesContent":["module.exports = {\n    dns: 'http://localhost',\n    port: 9000\n};\n","module.exports = __webpack_public_path__ + \"static/media/logo.e6a7f2e3.svg\";","module.exports = __webpack_public_path__ + \"static/media/poop_happy.4213c2be.svg\";","module.exports = __webpack_public_path__ + \"static/media/poop_sad.b6913af0.svg\";","module.exports = __webpack_public_path__ + \"static/media/poop_toxicity.62dab8ec.svg\";","export const get = async (url) => {\n    const options = {\n        method: 'GET',\n        headers: { 'Content-Type': 'application/json' },\n        mode: 'cors',\n        cache: 'default'\n    };\n\n    const data = await fetch(url, options); // axios\n\n    try {\n        const json = await data.json();\n        return { json, data };\n    }\n    catch (error) {\n        return error;\n    }\n};\n\nexport const post = async (url, body) => {\n    const options = {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        mode: 'cors',\n        cache: 'default',\n        body\n    };\n\n    const data = await fetch(url, options);\n\n    try {\n        const json = await data.json();\n        return { json, data };\n    }\n    catch (error) {\n        return error;\n    }\n};\n\nexport const put = async (url, body) => {\n    const options = {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        mode: 'cors',\n        cache: 'default',\n        body: JSON.stringify(body)\n    };\n\n    const data = await fetch(url, options);\n    try {\n        const json = await data.json();\n        return { json, data };\n    }\n    catch (error) {\n        return error;\n    }\n};\n\nexport const XHRdelete = async (url, body) => {\n    const options = {\n        method: 'DELETE',\n        headers: { 'Content-Type': 'application/json' },\n        mode: 'cors',\n        cache: 'default',\n        body\n    };\n\n    const data = await fetch(url, options);\n\n    try {\n        const json = await data.json();\n        return { json, data };\n    }\n    catch (error) {\n        return error;\n    }\n};\n","import React from 'react';\nimport logo from '../../../assets/logo.svg';\n\nimport './header.css';\n\nconst Header = function (props) {\n    return (\n        <div className='header'>\n            <img src={logo} alt='logo'></img>\n            {/* <span className='header-title'>{title}</span> */}\n        </div>\n    );\n};\n\nexport default Header;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport poopHappy from '../../../assets/poop_happy.svg';\nimport poopSad from '../../../assets/poop_sad.svg';\n\nimport './indicator.css';\n\nconst Indicator = (props) => {\n    const { status } = props;\n    const happy = 'You can go now';\n    const sad = 'Houston, we have a problem';\n    return (\n        <div className='indicator'>\n            <img src={status ? poopSad : poopHappy} className=\"App-logo\" alt=\"logo\" />\n            <span className=\"indicator-text\">{status ? sad : happy}</span>\n        </div>\n    );\n};\n\nIndicator.defaultProps = {\n};\n\nIndicator.propTypes = {\n    status: PropTypes.bool.isRequired\n};\n\n\nexport default Indicator;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ReactTable from 'react-table';\n\nimport 'react-table/react-table.css';\nimport './table.css';\n\nconst Table = (props) => {\n    const { top, cb } = props;\n    const columns = [{\n        Header: 'Name',\n        accessor: 'user',\n        style: {\n            textAlign: 'left',\n            fontSize: '20px'\n        }\n    }, {\n        Header: 'Average(pups)',\n        accessor: 'average',\n        style: {\n            textAlign: 'right',\n            fontSize: '20px'\n        }\n    }, {\n        Header: 'Top(pups)',\n        accessor: 'top',\n        style: {\n            textAlign: 'right',\n            fontSize: '20px'\n        }\n    }, {\n        Header: 'Date',\n        accessor: 'date',\n        style: {\n            textAlign: 'right',\n            fontSize: '20px'\n        }\n    }];\n\n    return (\n        <div className=\"table\">\n            <ReactTable\n                data={top}\n                columns={columns}\n                pageSize = \"10\"\n                showPagination = {false}\n                defaultSortMethod = {(a, b, desc) => {\n                    return b - a;\n                }}\n                getTdProps={(state, rowInfo, column, instance) => {\n                    return {\n                        onClick: (e, handleOriginal) => {\n                            cb(rowInfo.original);\n                        }\n                    };\n                }}\n            />\n        </div>\n    );\n};\n\n\nTable.defaultProps = {\n};\n\nTable.propTypes = {\n    top: PropTypes.array.isRequired,\n    cb: PropTypes.func.isRequired\n};\n\n\nexport default Table;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport poop from '../../../assets/poop_toxicity.svg';\n\nimport './smellindicator.css';\n\nconst SmellIndicator = (props) => {\n    const { smellValue } = props;\n    // console.log(typeof smellValue);\n    let valueClass = 'smell-indicator-value';\n\n    if (smellValue < 30) {\n        valueClass += ' green';\n    }\n    else if (smellValue < 60) {\n        valueClass += ' yellow';\n    }\n    else if (smellValue < 100) {\n        valueClass += ' orange';\n    }\n    else {\n        valueClass += ' red';\n    }\n\n    return (\n        <div className='smell-indicator'>\n            <div className='smell-indicator-icon'>\n                <img src={poop} alt='toxicity'></img>\n            </div>\n            <div className=\"smell-indicator-text\">\n                <span className='smell-indicator-label'>Toxicity:</span>\n                <span className={valueClass}>{smellValue}</span>\n            </div>\n        </div>\n    );\n};\n\nSmellIndicator.defaultProps = {\n};\n\nSmellIndicator.propTypes = {\n    smellValue: PropTypes.number.isRequired\n};\n\n\nexport default SmellIndicator;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './form.css';\n\nconst Form = function (props) {\n    const { cb } = props;\n    function callback() {\n        const input = document.getElementById('name-input');\n        cb({ name: input.value });\n    }\n    return (\n        <div className='form'>\n            <input id=\"name-input\" type='text' className='form-input' ></input>\n            <button onClick={callback}>Insert Name</button>\n        </div>\n    );\n};\n\nForm.defaultProps = {\n};\n\nForm.propTypes = {\n    cb: PropTypes.func.isRequired\n};\n\nexport default Form;\n","import React, { Component } from 'react';\nimport './App.css';\n\nimport { get, put } from './helpers/xhrequests';\nimport { Header, Indicator, Table, SmellIndicator, Form } from './components/index';\n\nimport * as config from './config';\n\n\nclass App extends Component {\n    constructor() {\n        super();\n        this.state = {\n            status: false,\n            top: [],\n            smellValue: 0,\n            id: null\n        };\n        this.loadInfo = () => {\n            const { status, toxicity } = this.state;\n            const getStatus = get(`${config.dns}:${config.port}/api/v1/status`);\n\n            getStatus.then((data) => {\n                if (status !== data.json.data.status) {\n                    this.setState({ status: data.json.data.status });\n                }\n            }).catch(() => {\n                console.log('Error Getting bathroom Status');\n            });\n\n            const getToxicity = get(`${config.dns}:${config.port}/api/v1/toxicity`);\n\n            getToxicity.then((data) => {\n                const parsedInt = parseInt(data.json.data.toxicity, 10);\n                if (toxicity !== parsedInt) {\n                    this.setState({ smellValue: parsedInt });\n                }\n            }).catch(() => {\n                console.log('Error Getting bathroom Status');\n            });\n        };\n    }\n\n    componentDidMount() {\n        const getTop = get(`${config.dns}:${config.port}/api/v1/top`);\n        const { top } = this.state;\n\n\n        getTop.then((data) => {\n            if (data.json.data.top) {\n                if (top !== data.json.data.top) {\n                    this.setState({ top: data.json.data.top });\n                }\n            }\n        }).catch(() => {\n            console.log('Error Getting bathroom Status');\n        });\n        this.loadInfo();\n        setInterval(this.loadInfo, 1000);\n    }\n\n    render() {\n        const { status, top, smellValue, change, id} = this.state;\n        let topWrapper;\n        if (!change) {\n            topWrapper = <Table top={top} cb={(item) => {\n                if (!item.lock) {\n                    this.setState({ change: true, id: item.id });\n                }\n            }} />;\n        }\n        else {\n            topWrapper = <Form cb={(info) => {\n                const data = put(`${config.dns}:${config.port}/api/v1/session/${id}/owner`, info);\n                console.log(data);\n                data.then((info) => {\n                    if (info.data.status === 200) {\n                        this.setState({ change: false, id: null, top: info.json.data.top });\n                    }\n                });\n            }}/>;\n        }\n        return (\n            <div className=\"App\">\n                <Header/>\n                <SmellIndicator smellValue={smellValue}/>\n                <Indicator status={status} />\n                {topWrapper}\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}